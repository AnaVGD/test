(()=>{var e={};e.id=916,e.ids=[916],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3631:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>h,routeModule:()=>u,serverHooks:()=>m,workAsyncStorage:()=>p,workUnitAsyncStorage:()=>g});var n={};r.r(n),r.d(n,{POST:()=>l});var i=r(2706),s=r(8203),o=r(5994),a=r(3369),d=r(6045),c=r(5353);async function l(e){let{messages:t}=await e.json();return(0,c.gM)({model:(0,d.N)("gpt-4o"),system:"You are a friendly assistant!",messages:t,maxSteps:5,tools:a.Yl}).toDataStreamResponse()}(0,d.N)("gpt-3.5-turbo");let u=new i.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/completion/route",pathname:"/api/completion",filename:"route",bundlePath:"app/api/completion/route"},resolvedPagePath:"/Users/avgd/Documents/test/src/app/api/completion/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:p,workUnitAsyncStorage:g,serverHooks:m}=u;function h(){return(0,o.patchFetch)({workAsyncStorage:p,workUnitAsyncStorage:g})}},6487:()=>{},8335:()=>{},3369:(e,t,r)=>{"use strict";r.d(t,{Yl:()=>a});var n=r(6045),i=r(5353),s=r(379);let o=JSON.parse('[{"id":"no-console","description":"Avoid using console.log in production code.","pattern":"console.log","suggestion":"Consider using a logging library instead. Example: Winston or Pino for structured logging."},{"id":"prefer-const-over-let","description":"Prefer \'const\' over \'let\' when the variable is not reassigned.","pattern":"let ","suggestion":"Use \'const\' instead of \'let\' to avoid unintentional reassignments."},{"id":"use-template-literals","description":"Use template literals instead of string concatenation.","pattern":"\'.*\' \\\\+ .* \\\\+ \'.*\'","suggestion":"Consider using template literals for better readability and performance. Example: `Hello, ${user.name}!`"},{"id":"avoid-any-typing","description":"Avoid using \'any\' for typing.","pattern":": any","suggestion":"Use specific types instead of \'any\' to improve type safety and code maintainability."},{"id":"no-errors-schema","description":"Avoid using NO_ERRORS_SCHEMA in Angular tests.","pattern":"NO_ERRORS_SCHEMA","suggestion":"Prefer CUSTOM_ELEMENTS_SCHEMA to allow only valid custom elements and ensure cleaner, safer code."},{"id":"remove-unused-imports","description":"Remove unused imports from the codebase.","pattern":"import .*;","suggestion":"Ensure that all imported modules are being used in the code to avoid unnecessary clutter."},{"id":"follow-aaa-pattern","description":"Follow the Arrange-Act-Assert pattern in unit tests.","pattern":"it\\\\(.*\\\\{.*\\\\}","suggestion":"Structure your tests with clear Arrange, Act, and Assert steps for readability and maintainability."},{"id":"use-optional-chaining","description":"Use optional chaining to simplify null/undefined checks.","pattern":"if\\\\s*\\\\(.*&&.*\\\\)","suggestion":"Consider using optional chaining (?.) to reduce nesting and improve code readability."},{"id":"avoid-direct-http","description":"Avoid making direct HTTP requests; prefer using SDKs.","pattern":"http\\\\.get\\\\(.*\\\\)","suggestion":"Use SDKs where available to abstract API interactions and improve maintainability."},{"id":"remove-fixture-detect-changes","description":"Remove unnecessary calls to fixture.detectChanges in Angular tests.","pattern":"fixture.detectChanges\\\\(\\\\)","suggestion":"Only call fixture.detectChanges when necessary to reduce test runtime."}]'),a={getStockPrice:(0,i.z6)({description:"Get price for a stock",parameters:s.z.object({symbol:s.z.string().describe("The stock symbol to get the price for"),price:s.z.number().describe("The price of the stock")}),execute:async function({symbol:e,price:t}){return await new Promise(e=>setTimeout(e,2e3)),{symbol:e,price:t}}}),codeLint:(0,i.z6)({description:"Analyze code and return recommended rule corrections",parameters:s.z.object({code:s.z.string().describe("The source code to analyze")}),execute:async function({code:e}){let t=`
        Analyze the following JavaScript code and check it against these predefined rules:
        ${o.map(e=>`Rule: ${e.id} - ${e.description}`).join("\n")}
        
        Code to analyze:
        \`\`\`js
        ${e}
        \`\`\`
        
        Provide a detailed JSON response with:
        - The rule ID that was violated
        - Line number of the issue
        - Content of the problematic line
        - Suggested fix based on the predefined rules
        `,r=(0,n.N)("gpt-3.5-turbo"),a=s.z.object({ruleId:s.z.string().describe("The ID of the rule that was violated"),lineNumber:s.z.number().describe("The line number where the issue occurred"),lineContent:s.z.string().describe("The content of the problematic line"),suggestedFix:s.z.string().describe("The suggested fix based on the predefined rules")}),{object:d}=await (0,i.pY)({model:r,prompt:t,schema:a});return d}}),getMockTableData:(0,i.z6)({description:"Generate mock data for a table based on a description",parameters:s.z.object({description:s.z.string().describe("Description of the table and its columns"),numRows:s.z.number().optional().describe("Number of rows to generate (default: 10)")}),execute:async function({description:e,numRows:t=10}){let r=`
        Generate mock data for a table based on the following description:
        ${e}
The table should have ${t} rows.
        Provide the mock data in JSON format with column names as keys and arrays of values as values.
        example:
        {
          "id": [1, 2, 3, 4, 5],
          "name": ["John", "Jane", "Bob", "Alice", "Tom"],
          "age": [25, 30, 40, 50, 60]
        }
        `,s=(0,n.N)("gpt-3.5-turbo"),{text:o}=await (0,i.Df)({model:s,prompt:r,maxTokens:500,maxRetries:2});return console.log(o),JSON.parse(o)}})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[994,120],()=>r(3631));module.exports=n})();